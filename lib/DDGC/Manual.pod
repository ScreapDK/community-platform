# PODNAME: DDGC::Manual
# ABSTRACT: Documentation for contributing to the community platform

=encoding utf-8

=head1 OVERVIEW

The community platform of L<DuckDuckGo|https://duckduckgo.com/> at
L<https://duck.co/> is an independent open source platform made for handling
and coordinating the requirements of interaction with the community. Historical
those needs were fulfilled with several external services which allowed us to
reduce the management overhead. Sadly those services didn't allowed us to
customize them as we needed, which leaded to the start of the community platform
and a slow migration of all external services towards it. Now all interaction
with our users and contributors is coordinated via the community platform and
L<GitHub|https://github.com/>.

=head1 SETUP

A key point of the community platform was making it a totally independent
infrastructure, which has no special rights or any special connection towards
DuckDuckGo. This was decided to prevent any security problem from one platform
from damaging the other. Another strong reason for making the platform
independent is our privacy policy and the image the user wants to see, as we
want to make it 100% clear that no relation exists between the activity of the
user on DuckDuckGo and the account on the community platform. On the other
hand, we do want to enhance the DuckDuckGo experience by using accounts from
this platform for everything. In the future, perhaps you could save your
settings to this account!

Currently (End 2013) the community platform runs on a Debian server (while the
search engine uses Ubuntu), where we also run the database. We call this server
B<wing>, which is a reference to the wing of a duck :).

In addition to the web platform, we also offer an XMPP server on the community
platform. The XMPP server is used as the storage for accounts. That means when
you create an account via XMPP, you can log in on the web with the same
credentials. The same is true in reverse.

=head1 TECHNOLOGY

The community platform is made in Perl using L<Catalyst> and L<DBIx::Class>.
As template engine, we use L<Text::Xslate>. We use L<Prosody|http://prosody.im/>
for the XMPP server. Our Prosody server is maintained by Prosody's lead
developer, ensuring excellent stability. The XMPP server is federated to allow
users to connect with all other XMPP users in the world.
L<nginx|http://nginx.org/> is the web server powering L<https://duck.co>,but we
also plan to add B<varnish> as frontend proxy to offer a better caching.
For search and indexing we use L<Dezi|http://dezi.org>, which in turn uses
L<Swish-e|https://swish-e.org> and Apache's B<Lucene>.


=head1 STAGING

For testing and staging our changes, we use a close of B<wing> named B<view>.
It has its own database, XMPP server, etc. to maintain a perfectly separate
environment.

=head1 DEVELOPMENT

Although we use L<Catalyst> as web framework and base, the project is not
built entirely as a I<classical> Catalyst application, because we also have to
take care of many processes which are far outside of Catalyst's scope. This
leads to a design surrounding a very strong central structure, which is just
used by Catalyst for the web application. This central code is meant to be
run easily with or without the web.

=head1 WORKING ON THE COMMUNITY PLATFORM

There are many areas in which you can help the community platform. We have tons
of translations to review and many yet untranslated tokens. If you know any
languages besides English, we could use help voting on translations, marking out
incorrect translations, and offering new translations.

If you have a few moments to spare, we could use help managing spam and
answering questions on the Forum and in other community homes. Vote on your
favourite Instant Answer ideas and suggest new ideas so we get more and better
Instant Answers.

If you are a developer (or wish to learn!), take a look at the community
platform's L<issue|https://github.com/duckduckgo/community-platform/issues> page
and see what you can tackle. Chat with us in
L<#duckduckgo|http://webchat.freenode.net/?channels=duckduckgo> or shoot us
an email if you need help, or if you just want to be social!

Even if you do not want to develop the community platform directly, we would
love your feedback and suggestions. Create a new issue on GitHub or a thread on
our forums. This is the community's platform!

The rest of this introduction will cover some general ways in which developers
and development strategists can help.

=head2 AS DESIGNER, HTML OR CSS EXPERT

The interface of our community platform has a very stable and simple HTML/CSS
structure which is designed to make development fast and easy. There is a big
problem for projects like the community platform which have tons of
contributors all over the world: B<communication>. Communication is the key to a
good organizational structure in large projects. We encountered some issues when
developers of various parts of the system tried to put together pieces which
could never really fit together. For the frontend, our designer Doug Brown took
care of this problem by creating some of the coolest CSS we have seen. You want
a big blue button? Well, class="big blue button". A blue row in a table?
class="blue row".

The challenge here is to keep up the good standard, as it is often quite easy to
stray from the path.

For a CSS/HTML guru, one of the tasks we consistently have available is cleaning
up the HTML made by backend developers. We copy'n'paste code. A lot. That leads
to HTML with a lot of unnecessary classes and elements, as we simply grab
anything which looks close to what we want. Of course, you can also clean up the
terrible design decisions we make as well :).

It is not always required to actually run a development instance of the
community platform to see the results. CSS changes can be done these days
inside the browser (right click, inspect element), which can be the more
straight forward way for little changes. However, we do strongly suggest
running your own instance of the community platform at home. See
L<DDGC::Manual::Install>.

Additionally you will more detailed instructions for HTML/CSS developers at
L<DDGC::Manual::Interface>.

=head2 AS BACKEND DEVELOPER

The biggest help we need is in the backend development area. We have a huge
stack of TODOs and interface improvements we want to achieve. Only the lack of
developer time limits our possibilities.

The community platform should be very interesting for you as a developer,
because it touches on all topics of professional web development, and is still
fully open source. You can run the entire platform on your own Linux machine.
It includes a complete test database, and everything you need to directly see
what is going on. If you want, you can also set up your own Prosody server for
your development environment. For the procedure to install the community
platform at home please read L<DDGC::Manual::Install>.

For more details about what you need to know as a developer, please read
L<DDGC::Manual::Development>. The community platform is mainly in B<Perl>, but
don't let that discourage you if you are not familiar with it.
If you have experience with other languages it will be very easy to help in
several areas. You can then dive deeper into Perl (you know you want to), 
but we would be glad to help you all the way if you want to help us.

=head2 AS QUALITY ASSURANCE

The final mission: testing. Bugs will inevitably pop up in the community
platform. If you find one, let us know. Even things which just annoy you a bit,
let us know. This is the community platform, it should not annoy the community!
